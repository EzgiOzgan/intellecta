/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Intellecta
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/ui/settings.ts
var import_obsidian = require("obsidian");
var IntellectaSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", {
      text: "Intellecta Settings"
    });
    containerEl.createEl("h2", {
      text: "OpenAI"
    });
    new import_obsidian.Setting(containerEl).setName("API Key").setDesc("The API key obtained from OpenAI").addText(
      (text) => text.setPlaceholder("API Key").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
        this.plugin.settings.apiKey = value;
        await this.plugin.saveSettings();
      })
    );
    let models = [
      "gpt-3.5-turbo-0613",
      "gpt-4-0613",
      "gpt-4-32k-0613"
    ];
    new import_obsidian.Setting(containerEl).setName("Language Model").setDesc("The language model to be used in text generation").addDropdown((dropdown) => {
      models.forEach((modelName) => {
        dropdown.addOption(modelName, modelName);
      });
      dropdown.setValue(this.plugin.settings.engine);
      dropdown.onChange(async (value) => {
        this.plugin.settings.engine = value;
        await this.plugin.saveSettings();
      });
    });
  }
};

// src/ui/literatureGen.ts
var import_obsidian2 = require("obsidian");
var VIEW_TYPE_LITERATURE = "literature-generation-view";
var LiteratureGenView = class extends import_obsidian2.ItemView {
  constructor(leaf) {
    super(leaf);
  }
  getViewType() {
    return VIEW_TYPE_LITERATURE;
  }
  getDisplayText() {
    return "Literature Note Generator";
  }
  async onOpen() {
    this.containerEl.empty();
    this.containerEl.createEl("h2", {
      text: "Literature Notes Suggestions"
    });
  }
  async onClose() {
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  // OpenAI API key
  apiKey: "",
  engine: "gpt-3.5-turbo-0613"
};
var Intellecta = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("brain-circuit", "Card Generator", (event) => {
      const cardTypeMenu = new import_obsidian3.Menu();
      const cardTypes = [
        {
          title: "Literature",
          clickHandler: () => {
            this.registerView(
              VIEW_TYPE_LITERATURE,
              (leaf) => new LiteratureGenView(leaf)
            );
            this.activateView(VIEW_TYPE_LITERATURE);
          }
        },
        {
          title: "Permanent",
          clickHandler: () => {
          }
        },
        {
          title: "Conceptual",
          clickHandler: () => {
          }
        }
      ];
      for (const cardType of cardTypes) {
        cardTypeMenu.addItem(
          (item) => item.setTitle(cardType.title).onClick(cardType.clickHandler)
        );
      }
      cardTypeMenu.showAtMouseEvent(event);
    });
    this.addSettingTab(new IntellectaSettingTab(this.app, this));
  }
  async onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateView(viewType) {
    this.app.workspace.detachLeavesOfType(viewType);
    await this.app.workspace.getRightLeaf(false).setViewState({
      type: viewType,
      active: true
    });
    this.app.workspace.revealLeaf(
      this.app.workspace.getLeavesOfType(viewType)[0]
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
